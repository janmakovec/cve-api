<?php

declare(strict_types=1);

namespace App\Model;

use Nette;

/**
 * CveRecordsManager management.
 */
final class CveRecordsManager {

    use Nette\SmartObject;

    private const
            TABLE_NAME = 'cve_records',
            COLUMN_ID = 'id',
            COLUMN_CVE_ID = 'cveId',
            COLUMN_LAST_CHANGED = 'last_changed',
            COLUMN_DATA = 'data';

    /** @var Nette\Database\Context */
    private $database;

    public function __construct(Nette\Database\Context $database) {
        $this->database = $database;
    }

    public function createOrUpdate($cveId, $jsonObject) {
        $existingRow = $this->database
                ->table(self::TABLE_NAME)
                ->where(self::COLUMN_CVE_ID, $cveId)
                ->fetch();
        if ($existingRow === null) {
            $this->database
                    ->table(self::TABLE_NAME)
                    ->insert(array(
                        self::COLUMN_CVE_ID => $cveId,
                        self::COLUMN_DATA => json_encode($jsonObject)
            ));
        } else {
            $existingRow->update(array(
                self::COLUMN_CVE_ID => $cveId,
                self::COLUMN_DATA => json_encode($jsonObject)
            ));
        }
    }

    /**
     * 
     * @param DateTime $dtLastChangedFrom
     * @param array|null $keywords
     * @param int $limit
     * @param int $page
     */
    public function getRecords($dtLastChangedFrom, $keywords, $limit, $page) {
        $selection = $this->database
                ->table(self::TABLE_NAME);
        if ($dtLastChangedFrom !== null) {
            $selection->where("last_changed > ?", $dtLastChangedFrom->format("Y-m-d H:i:s"));
        }
        if ($keywords !== null) {
            $keywordsConditions = array();
            foreach ($keywords as $keyword) {
                $keywordsConditions["data LIKE ?"] = "%" . $keyword . "%";
            }
            $selection->whereOr($keywordsConditions);
        }
        $selection->limit($limit, ($page - 1) * $limit);
        return $selection->fetchAll();
    }

    public function getLastChangedRecord() {
        return $this->database
                        ->table(self::TABLE_NAME)
                        ->order("last_changed DESC")
                        ->limit(1)
                        ->fetch();
    }
}
