<?php

declare(strict_types=1);

namespace App\Presenters;

use Nette;

final class ApiPresenter extends Nette\Application\UI\Presenter {

    /** @var \App\Model\CveRecordsManager @inject */
    public $cveRecordsManager;

    public function actionDefault() {
        $responseObject = (object)
                [
                    "result" => "success",
                    "resultMessage" => "It's alive!"
        ];
        echo json_encode($responseObject);
        exit;
    }

    public function actionCron() {
        $files = scandir(__DIR__ . "/../../cvedata");
        //
        if (!file_exists(__DIR__ . "/../../cvedata/processed")) {
            mkdir(__DIR__ . "/../../cvedata/processed");
        }
        //
        $filesProcessed = 0;
        foreach ($files as $file) {
            if (str_starts_with($file, "log_") && str_ends_with($file, ".txt")) {
                //Process_log_file
                $this->processLogFile(__DIR__ . "/../../cvedata/" . $file);
                rename(__DIR__ . "/../../cvedata/" . $file, __DIR__ . "/../../cvedata/processed" . $file);
                $filesProcessed++;
                //
            }
        }
        if ($filesProcessed == 0) {
            echo "No file processed.";
        }
        exit;
    }

    public function actionInitialLoading($limit = 1000, $page = 1) {
        $target = __DIR__ . "/../../cvedata/cvelistV5/";
        $filesFound = array();
        $iterator = 0;
        //
        $from = ($page - 1) * 1000;
        $to = $page * 1000;
        $continue = true;
        self::scanDirRecursively($target, $filesFound, $iterator, $from, $to, $continue);
        foreach ($filesFound as $file) {
            $this->processCveJsonFile($file);
        }
        if (\count($filesFound) === $limit) {
            echo '<meta http-equiv="refresh" content="2;url=?page=' . ($page + 1) . '">';
        }
        exit;
    }

    private static function scanDirRecursively($target, &$filesFound, &$iterator, $from, $to, &$continue) {
        if (is_dir($target)) {
            $files = glob($target . '*', GLOB_MARK); //GLOB_MARK adds a slash to directories returned
            foreach ($files as $file) {
                self::scanDirRecursively($file, $filesFound, $iterator, $from, $to, $continue);
                if (!$continue) {
                    break;
                }
            }
        } else {
            if ($iterator >= $from) {
                $filesFound[$iterator] = $target;
                $iterator++;
                if ($iterator == $to) {
                    $continue = false;
                    return;
                }
            } else {
                $iterator++;
            }
        }
    }

    public function processLogFile($file) {
        echo "processing file: " . $file;
        //
        $handle = fopen($file, "r");
        if ($handle) {
            while (($line = fgets($handle)) !== false) {
                //line by line
                if (\strpos($line, ".json") !== false) {
                    //pokud obsahuje JSON, tak to bude zřejmě cesta k souboru
                    $lineParts = \explode(" ", $line);
                    foreach ($lineParts as $linePart) {
                        //Pokud kus končí json, tak půjde o aktualizovaný soubor
                        if (\str_ends_with($linePart, ".json")) {
                            $this->processCveJsonFile(__DIR__ . "/../../cvedata/cvelistV5/" . $linePart);
                        }
                    }
                }
            }
            fclose($handle);
        }
        //
        echo "<br>";
    }

    public function processCveJsonFile($file) {
        echo "Content of file: " . $file;
        echo "<pre style='background-color: yellow;'>";
        $jsonObject = json_decode(file_get_contents($file), false);
        if ($jsonObject === null) {
            echo "FILE IS NOT A VALID JSON!";
        } else {
            echo "JSON OK";
            echo "\n";
            //var_export($jsonObject);
            //
            echo "\n";
            if (is_object($jsonObject)) {
                if (isset($jsonObject->cveMetadata)) {
                    $this->cveRecordsManager->createOrUpdate($jsonObject->cveMetadata->cveId, $jsonObject);
                } else {
                    echo "cveMetadata not set";
                }
                //var_export(property_exists($jsonObject));
            } else {
                echo "not an object";
            }


            //var_export($jsonObject->cveMetadata);
        }
        echo "</pre>";
    }
}
